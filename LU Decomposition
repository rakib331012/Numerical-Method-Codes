import numpy as np

def lu_decomposition(matrix):
    n = len(matrix)
    # Initialize L and U matrices
    L = np.eye(n)
    U = np.zeros((n, n))

    for i in range(n):
        # Upper triangular matrix
        for k in range(i, n):
            sum_ = 0
            for j in range(i):
                sum_ += L[i][j] * U[j][k]
            U[i][k] = matrix[i][k] - sum_

        # Lower triangular matrix
        for k in range(i + 1, n):
            sum_ = 0
            for j in range(i):
                sum_ += L[k][j] * U[j][i]
            L[k][i] = (matrix[k][i] - sum_) / U[i][i]

    return L, U

def inverse_matrix(L, U):
    n = len(L)
    identity = np.eye(n)
    inverse = np.zeros((n, n))

    # Solve Ly = I for y
    y = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            sum_ = 0
            for k in range(i):
                sum_ += L[i][k] * y[k][j]
            y[i][j] = identity[i][j] - sum_

    # Solve Ux = y for x (inverse)
    for i in range(n - 1, -1, -1):
        for j in range(n):
            sum_ = 0
            for k in range(i + 1, n):
                sum_ += U[i][k] * inverse[k][j]
            inverse[i][j] = (y[i][j] - sum_) / U[i][i]

    return inverse

def determinant(U):
    det = 1
    n = len(U)
    for i in range(n):
        det *= U[i][i]
    return det

def print_matrix(matrix, name):
    print(f"{name} Matrix:")
    for row in matrix:
        print(row)

# Example matrix
input_matrix = np.array([[25, 5, 1],
                         [64, 8, 1],
                         [144, 12, 1]])

# LU decomposition
L, U = lu_decomposition(input_matrix)

# Inverse matrix
inv_matrix = inverse_matrix(L, U)

# Determinant
det_value = determinant(U)

# Print results
print_matrix(input_matrix, "Original")
print_matrix(L, "Lower Triangular")
print_matrix(U, "Upper Triangular")
print_matrix(inv_matrix, "Inverse")

print(f"Determinant: ", round(det_value, 2))
