import numpy as np
import matplotlib.pyplot as plt

# Define the ODE
def f(t, y):
    return -2.2067*10**(-12)*(y**4 - 81*10**8)

# Euler's method
def euler_method(f, t0, y0, h, num_steps):
    t_values = [t0 + i * h for i in range(num_steps + 1)]
    y_values = [y0]
    for i in range(num_steps):
        y_next = y_values[-1] + h * f(t_values[i], y_values[-1])
        y_values.append(y_next)
    return t_values, y_values

# Runge-Kutta 2nd order methods
def heun_method(f, t0, y0, h, num_steps):
    t_values = [t0 + i * h for i in range(num_steps + 1)]
    y_values = [y0]
    for i in range(num_steps):
        k1 = f(t_values[i], y_values[-1])
        k2 = f(t_values[i] + h, y_values[-1] + h * k1)
        y_next = y_values[-1] + 0.5 * h * (k1 + k2)
        y_values.append(y_next)
    return t_values, y_values

def midpoint_method(f, t0, y0, h, num_steps):
    t_values = [t0 + i * h for i in range(num_steps + 1)]
    y_values = [y0]
    for i in range(num_steps):
        k1 = f(t_values[i], y_values[-1])
        k2 = f(t_values[i] + 0.5 * h, y_values[-1] + 0.5 * h * k1)
        y_next = y_values[-1] + h * k2
        y_values.append(y_next)
    return t_values, y_values

def ralston_method(f, t0, y0, h, num_steps):
    t_values = [t0 + i * h for i in range(num_steps + 1)]
    y_values = [y0]
    for i in range(num_steps):
        k1 = f(t_values[i], y_values[-1])
        k2 = f(t_values[i] + 3/4 * h, y_values[-1] + 3/4 * h * k1)
        y_next = y_values[-1] + h * (1/3 * k1 + 2/3 * k2)
        y_values.append(y_next)
    return t_values, y_values

#Exact Solution = 647.57K


# Comparison function
def compare_methods():
    t = int(input("Enter t: "))
    t0 = int(input("Enter t0: "))
    y0 = int(input("Enter y0: "))
    h = int(input("Enter h: "))

    #t, t0, y0, h = 480, 0, 1200, 240
    num_steps = int(t / h)

    # Euler's method
    t_euler, y_euler = euler_method(f, t0, y0, h, num_steps)
    #ErrE = abs((647.57-y_euler[-1])/647.57) * 100

    print("Euler's Method: ", round(y_euler[-1],2))
    #print("Euler's Method Error: ", round(ErrE, 3))


    # Heun's method
    t_heun, y_heun = heun_method(f, t0, y0, h, num_steps)
    #ErrH = abs((647.57-y_heun[-1])/647.57) * 100

    print("Heun's Method:", round(y_heun[-1], 2))
    #print("Heun's Method Error: ", round(ErrH, 3))


    # Midpoint method
    t_midpoint, y_midpoint = midpoint_method(f, t0, y0, h, num_steps)
    #ErrM = abs((647.57-y_midpoint[-1])/647.57) * 100

    print("Midpoint Method: ", round(y_midpoint[-1], 2))
    #print("Midpoint Method Error: ", round(ErrM, 3))


    # Ralston's method
    t_ralston, y_ralston = ralston_method(f, t0, y0, h, num_steps)
    #ErrR = abs((647.57- y_ralston[-1])/647.57) * 100

    print("Ralston's Method: ", round(y_ralston[-1], 2))
    #print("Ralston's Method Error: ", round(ErrR, 3))


    # Plotting
    plt.figure(figsize=(12, 8))
    plt.plot(t_euler, y_euler, label='Euler')
    plt.plot(t_heun, y_heun, label="Heun's Method")
    plt.plot(t_midpoint, y_midpoint, label='Midpoint Method')
    plt.plot(t_ralston, y_ralston, label="Ralston's Method")
    plt.title('Comparison of ODE Solvers')
    plt.xlabel('t')
    plt.ylabel('y(t)')
    plt.legend()
    plt.show()

compare_methods()
